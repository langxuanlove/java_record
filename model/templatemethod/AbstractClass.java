package model.templatemethod;


/**
 * http://blog.csdn.net/lovelion/article/details/8299794
 *  模板方法模式是一种基于继承的代码复用技术，它是一种类行为型模式。
 *  模板方法模式是结构最简单的行为型设计模式，在其结构中只存在父类与子类之间的继承关系。
 *  通过使用模板方法模式，可以将一些复杂流程的实现步骤封装在一系列基本方法中，
 *  在抽象父类中提供一个称之为模板方法的方法来定义这些基本方法的执行次序，而通过其子类来覆盖某些步骤，
 *  从而使得相同的算法框架可以有不同的执行结果。模板方法模式提供了一个模板方法来定义算法框架
 *  ，而某些具体步骤的实现可以在其子类中完成。
 * 
 * 模版方法模式
 *   在软件开发中，有时也会遇到类似的情况，某个方法的实现需要多个步骤（类似“请客”）
 *   ，其中有些步骤是固定的（类似“点单”和“买单”），而有些步骤并不固定，存在可变性（类似“吃东西”）。
 *   为了提高代码的复用性和系统的灵活性，可以使用一种称之为模板方法模式的设计模式来对这类情况进行设计，在模板方法模式中，
 *   将实现功能的每一个步骤所对应的方法称为基本方法（例如“点单”、“吃东西”和“买单”）
 *   ，而调用这些基本方法同时定义基本方法的执行次序的方法称为模板方法（例如“请客”）。
 *   在模板方法模式中，可以将相同的代码放在父类中，例如将模板方法“请客”以及基本方法“点单”和“买单”的实现放在父类中，
 *   而对于基本方法“吃东西”，在父类中只做一个声明，将其具体实现放在不同的子类中，在一个子类中提供“吃面条”的实现
 *   ，而另一个子类提供“吃满汉全席”的实现。通过使用模板方法模式，一方面提高了代码的复用性，另一方面还可以利用面向对象的多态性，
 *  运行时选择一种具体子类，实现完整的“请客”方法，提高系统的灵活性和可扩展性。
 * @author kui
 *
 */
abstract class AbstractClass {
	public abstract void option1();

	public abstract void option2();
	
	public abstract String option3();
	
	public abstract void option4();
	
	public void templatedMethod(){
		option1();
		option2();
		System.out.println(option3());
		// 模版方法利用了继承的代码复用技术.子类实现父类的方法,并且基于一定的规则实现,
		// 但是具体的实现细节不同，条件不同判断是否执行指定的方法。
		if(option3().equals("ConCreteClassA")){
			System.out.println(" 不执行option4");
		}else{
			System.out.println(" 执行option4");
			option4();
		}
		System.out.println("模版方法.");
	}
}
